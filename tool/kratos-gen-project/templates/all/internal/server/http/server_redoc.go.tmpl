package http

import (
	"bytes"

    "{{.ModPrefix}}{{.Name}}/docs"
		"github.com/go-kratos/kratos/pkg/conf/paladin"
    	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
    	"html/template"
    	"net/http"
    )

type ReDocConfig struct {
    Enable bool
}

func initReDocRouter(e *bm.Engine) {
    var (
        cfg ReDocConfig
        ct  paladin.TOML
    )
    if err := paladin.Get("config.txt").Unmarshal(&ct); err != nil {
        return
    }
    if err := ct.Get("ReDoc").UnmarshalTOML(&cfg); err != nil {
        return
    }

    if cfg.Enable{
        g := e.Group("/help")
        {
            g.GET("/docs", reDoc)
            g.GET("/api.swagger.json", loadSwaggerJSONFile)
        }
    }
}

func reDoc(ctx *bm.Context) {
	var opts RedocOpts
	tmpl := template.Must(template.New("redoc").Parse(redocTemplate))

	buf := bytes.NewBuffer(nil)
	_ = tmpl.Execute(buf, opts)
	b := buf.Bytes()

	ctx.Bytes(http.StatusOK, "text/html; charset=utf-8", b)
}

// RedocOpts configures the Redoc middlewares
type RedocOpts struct {
	// BasePath for the UI path, defaults to: /
	BasePath string
	// Path combines with BasePath for the full UI path, defaults to: docs
	Path string
	// SpecURL the url to find the spec for
	SpecURL string
	// RedocURL for the js that generates the redoc site, defaults to: https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js
	RedocURL string
	// Title for the documentation site, default to: API documentation
	Title string
}

const (
	redocTemplate = `<!DOCTYPE html>
<html>
  <head>
    <title>API documentation</title>
		<!-- needed for adaptive design -->
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

    <!--
    ReDoc doesn't change outer page styles
    -->
    <style>
      body {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <redoc spec-url='./api.swagger.json'></redoc>
    <script src="https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js"> </script>
  </body>
</html>
`
)

func loadSwaggerJSONFile(ctx *bm.Context) {
	h, _ := docs.Create()
	ctx.Bytes(http.StatusOK, "application/json; charset=utf-8", h)
}
